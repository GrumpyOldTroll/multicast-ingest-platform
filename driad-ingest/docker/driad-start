#!/usr/bin/env python3

import argparse
import subprocess
from os.path import isfile
import sys
import time
import signal

stopping = False
def stop_handler(signum, frame):
    global stopping
    print(f'{datetime.now()}: stopping driad-ingest')
    stopping = True

def main(args_in):
    global stopping
    parser = argparse.ArgumentParser(
            description='''
This runs driad-ingest-mgr in the expected docker container layout.

driad-ingest-mgr monitors the control file for actively joined (S,G)s
and launches docker containers for AMT based on the DRIAD (RFC 8777)
DNS lookup for the AMTRELAY record.  It does not (yet) implement all the
recommendations in the DRIAD spec, but will do the basic establishing of
an AMT tunnel to an AMTRELAY advertised for the sources reverse IP.

It needs /var/run/docker.sock to launch the grumpyoldtroll/amtgw
container from dockerhub, and also needs the /var/run/smcroute.sock
to launch a join with smcroutectl, and there must be a docker
network for the --amt argument that's natted to the internet, as
well as a docker network (a macvlan type is recommended) for the
--native argument that can process the native multicast IP packets
and forward them downstream.

The set of joined (S,G)s comes from monitoring (in the docker container's
context) the file /var/run/ingest/joined.sgs for the set of actively
joined (S,G)s.

Since this is designed as the docker entry point, it will use docker-
specific paths by default if they are present.  This happens with:
    - /var/run/ingest/joined.sgs (containing the upstream joined (S,G)s)
''')

    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('-a', '--amt', required=True,
        help='The docker network name that can send and receive UDP to the internet to reach a remote AMT relay (should be a bridge or macvlan to the internet)')
    parser.add_argument('-n', '--native', required=True,
        help='The docker network name that processes native multicast traffic coming from the local AMT gateway instances (should be a macvlan)')
    parser.add_argument('-j', '--joinfile', required=True,
        help='Name of the file inside the container where (S,G)s will be updated (needs absolute path within the container)')

    args = parser.parse_args(args_in[1:])
    verbosity = None
    if args.verbose:
        verbosity = '-'+'v'*args.verbose

    control=args.joinfile

    ingest_cmd = [
            '/usr/bin/stdbuf', '-oL', '-eL', 
            sys.executable, '/bin/driad-ingest-mgr',
            '-a', args.amt,
            '-n', args.native,
            '-f', control,
        ]

    if verbosity:
        ingest_cmd.append(verbosity)

    signal.signal(signal.SIGTERM, stop_handler)
    signal.signal(signal.SIGINT, stop_handler)
    signal.signal(signal.SIGHUP, stop_handler)

    ingest_p = subprocess.Popen(ingest_cmd)

    ingest_ret = None
    while ingest_ret is None and not stopping:
        ingest_ret = ingest_p.poll()
        time.sleep(1)

    if ingest_ret is None:
        ingest_p.send_signal(signal.SIGTERM)
        ingest_p.wait(2)

    return ingest_ret

if __name__=="__main__":
    ret = main(sys.argv)
    sys.exit(ret)

